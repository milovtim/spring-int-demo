<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/integration"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:p="http://www.springframework.org/schema/p"
             xmlns:c="http://www.springframework.org/schema/c"
             xmlns:script="http://www.springframework.org/schema/integration/scripting"
             xmlns:stream="http://www.springframework.org/schema/integration/stream"
             xmlns:task="http://www.springframework.org/schema/task"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd http://www.springframework.org/schema/integration/scripting http://www.springframework.org/schema/integration/scripting/spring-integration-scripting.xsd http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder />
    <context:annotation-config />

    <beans:bean id="dynamicPeriodicTrigger"
                class="org.springframework.integration.util.DynamicPeriodicTrigger"
                p:initialDelay="1000"
                p:fixedRate="true"
                c:_0="${pollPeriod}" />

    <inbound-channel-adapter expression="new ru.milovtim.domain.NumberToMultiply(new java.util.Random().nextInt(100))"
                             channel="inputChannel" >
        <poller trigger="dynamicPeriodicTrigger" />
    </inbound-channel-adapter>

    <channel id="inputChannel">
        <queue capacity="100" />
        <interceptors>
            <wire-tap channel="outputLogger" />
        </interceptors>
    </channel>


    <bridge input-channel="inputChannel"
            output-channel="aggChannel">
        <poller fixed-delay="#{new Integer('${pollPeriod}') * 2.1}" max-messages-per-poll="10"/>
    </bridge>

    <channel id="aggChannel" />

    <aggregator id="batchMessages"
                input-channel="aggChannel"
                output-channel="processChannel"
                correlation-strategy-expression="T(Thread).currentThread().id"
                release-strategy-expression="size() == 10"
    />


    <channel id="processChannel" />


    <service-activator input-channel="processChannel"
                       output-channel="resultLogger">
        <script:script lang="groovy">import ru.milovtim.domain.NumberToMultiply

        java.util.concurrent.TimeUnit.SECONDS.sleep(2)
        payload.collect { NumberToMultiply it ->
            it.multiplied = it.value * 2
            it
        }
        </script:script>
    </service-activator>


    <stream:stdout-channel-adapter id="outputLogger"
                                   append-newline="true"/>

    <logging-channel-adapter id="resultLogger"
                             logger-name="result"
                             level="DEBUG"/>











    <task:executor id="worker-executor" pool-size="0-1" />

    <context:mbean-server id="mBeanServer"/>
    <context:mbean-export default-domain="ru.milovtim" registration="failOnExisting" />
    <beans:bean id="manualExporter"
                class="org.springframework.jmx.export.MBeanExporter"
                p:server-ref="mBeanServer"/>
    <beans:bean class="ru.milovtim.MbeansContext"
                p:trigger-ref="dynamicPeriodicTrigger"
                p:exporter-ref="manualExporter"
                p:taskExecutor-ref="worker-executor"/>
</beans:beans>